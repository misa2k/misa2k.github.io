{"version":3,"sources":["assets/logo/logo.png","components/Header/Header.js","function/getId/getId.js","components/Main/components/GetUris.js","components/Main/Main.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","id","getId","url","lastDotPos","lastIndexOf","itemId","substring","sub","shopId","GetUris","useState","setUrl","isUrl","setIsUrl","uris","setUris","loading","setLoading","urlRegex","inputUrl","createRef","onSubmit","e","preventDefault","axios","get","then","a","res","results","imagesIds","data","item","images","forEach","imagesId","uri","push","type","placeholder","required","onChange","target","value","test","ref","onClick","current","length","href","map","x","key","indexOf","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,kC,uQCe5BC,G,MATA,WACX,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAMC,IAAI,OAAOC,GAAG,SAC9B,yBAAKA,GAAG,SAAR,oB,wDCAGC,EAVD,SAACC,GACX,IAAMC,EAAaD,EAAIE,YAAY,KAC7BC,EAASH,EAAII,UAAUH,EAAa,GAEpCI,EAAML,EAAII,UAAU,EAAGH,GAG7B,MAAO,CAAEE,SAAQG,OAFFD,EAAID,UAAUC,EAAIH,YAAY,KAAO,KCwFzCK,G,MArFC,WAAO,IAAD,EACIC,mBAAS,IADb,mBACXR,EADW,KACNS,EADM,OAEQD,oBAAS,GAFjB,mBAEXE,EAFW,KAEJC,EAFI,OAGMH,mBAAS,IAHf,mBAGXI,EAHW,KAGLC,EAHK,OAIYL,oBAAS,GAJrB,mBAIXM,EAJW,KAIFC,EAJE,KAOZC,EAAW,wGAOXC,EAAWC,sBA2BjB,OACI,yBAAKxB,UAAU,WACX,0BAAMyB,SAtBC,SAACC,GAEZ,GADAA,EAAEC,iBACEX,EAAO,CACPK,GAAW,GACXF,EAAQ,IAFD,MAGkBd,EAAMC,GAAzBG,EAHC,EAGDA,OAAQG,EAHP,EAGOA,OACdgB,IAAMC,IAAN,uFAA0FpB,EAA1F,mBAA2GG,IAC1GkB,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,iBAAAD,EAAA,6DACEE,EAAU,GACVC,EAAYF,EAAIG,KAAKC,KAAKC,OAF5B,SAGIH,EAAUI,SAAS,SAAAC,GACrB,IAAIC,EAAG,oCAAgCD,GACvCN,EAAQQ,KAAKD,MALf,OAOFrB,EAAQc,GACRZ,GAAW,GART,2CADN,0DAiBI,2BAAOqB,KAAK,OACRC,YAAY,wBACZC,UAAQ,EACRC,SAtCE,SAACnB,GACfX,EAAOW,EAAEoB,OAAOC,OAChB9B,EAASK,EAAS0B,KAAKtB,EAAEoB,OAAOC,SAqCpBE,IAAK1B,IAET,yBAAKnB,GAAG,QAAQ8C,QAlCT,WACf3B,EAAS4B,QAAQJ,MAAQ,GACzBhC,EAAO,MAiCK,yBAAKX,GAAG,WACR,yBAAKA,GAAG,YAEZ,4BAAQJ,UAAU,OAAlB,QAEa,IAAhBkB,EAAKkC,QACF,uBAAGC,KAAK,gIACJP,OAAO,QACP1C,GAAG,UAEH,4DAKR,yBAAKJ,UAAU,UACVkB,EAAKoC,KAAI,SAAAC,GACN,OACA,yBAAKC,IAAKtC,EAAKuC,QAAQF,IACnB,yBAAKtD,IAAKsD,EAAGpD,IAAI,aAK5BiB,GACG,yBAAKpB,UAAU,WACX,yBAAKA,UAAU,WACf,+CCxEL0D,EARF,WACT,OACI,yBAAK1D,UAAU,QACX,kBAAC,EAAD,QCIG2D,G,MATA,WACX,OACI,yBAAK3D,UAAU,UACX,yBAAKA,UAAU,WAAf,wBACA,yBAAKA,UAAU,cAAf,sB,MCUG4D,MAVf,WACE,OACE,yBAAK5D,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDc6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.fc6b4ae2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6f09d0c3.png\";","import React from 'react';\n\nimport logo from '../../assets/logo/logo.png';\n\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        <div className='Header'>\n            <img src={logo} alt=\"logo\" id='logo'/>\n            <div id='brand'>Shopee Images</div>\n        </div>\n    );\n}\n\nexport default Header;","const getId = (url) => {\n    const lastDotPos = url.lastIndexOf('.');\n    const itemId = url.substring(lastDotPos + 1);\n\n    const sub = url.substring(0, lastDotPos);\n    const shopId = sub.substring(sub.lastIndexOf('.') + 1);\n\n    return { itemId, shopId };\n}\n\nexport default getId;","import React, { useState, createRef } from 'react';\nimport axios from 'axios';\n\nimport getId from '../../../function/getId/getId';\n\nimport './GetUris.css';\n\n\nconst GetUris = () => {\n    const [url, setUrl] = useState('');\n    const [isUrl, setIsUrl] = useState(true);\n    const [uris, setUris] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    // eslint-disable-next-line\n    const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/;\n\n    const updateUrl = (e) => {\n        setUrl(e.target.value);\n        setIsUrl(urlRegex.test(e.target.value));\n    }\n\n    const inputUrl = createRef();\n\n    const clearInput = () => {\n        inputUrl.current.value = '';\n        setUrl('');\n    }\n\n    const submit = (e) => {\n        e.preventDefault();\n        if (isUrl) {\n            setLoading(true);\n            setUris([]);\n            let { itemId, shopId } = getId(url);\n            axios.get(`https://cors-anywhere.herokuapp.com/https://shopee.vn/api/v2/item/get?itemid=${itemId}&shopid=${shopId}`)\n            .then(async res => {\n                let results = [];\n                let imagesIds = res.data.item.images;\n                await imagesIds.forEach( imagesId => {\n                    let uri = `https://cf.shopee.vn/file/${imagesId}`;\n                    results.push(uri);\n                });\n                setUris(results);\n                setLoading(false);\n            });\n        }\n    }\n\n    return (\n        <div className='GetUris'>\n            <form onSubmit={submit}>\n                <input type=\"text\" \n                    placeholder='Enter product link...'\n                    required\n                    onChange={updateUrl}\n                    ref={inputUrl}\n                />\n                <div id='clear' onClick={clearInput}>\n                    <div id='line-1'></div>\n                    <div id='line-2'></div>\n                </div>\n                <button className='get'>Get</button>\n            </form>\n            {uris.length !== 0 &&\n                <a href=\"https://genk.vn/khac-phuc-loi-luu-anh-tu-doi-sang-dinh-dang-jfif-tren-google-chrome-68-trong-windows-10-20180808181614155.chn\"\n                    target='blank'\n                    id='notice'\n                >\n                    <button>\n                        Trouble with .jfif file\n                    </button>\n                </a>\n            }\n            <div className='result'>\n                {uris.map(x => {\n                    return (\n                    <div key={uris.indexOf(x)}>\n                        <img src={x} alt='res' />\n                    </div>\n                    )\n                })}\n            </div>\n            {loading && \n                <div className='Loading'>\n                    <div className='loader'></div>\n                    <div>Loading...</div>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default GetUris;","import React from 'react';\n\nimport './Main.css';\n\nimport GetUris from './components/GetUris';\n\nconst Main = () => {\n    return (\n        <div className='Main'>\n            <GetUris />\n        </div>\n    );\n}\n\nexport default Main;","import React from 'react';\n\nimport './Footer.css';\n\nconst Footer = () => {\n    return (\n        <div className='Footer'>\n            <div className='br-name'> Â© Copyright 2020</div>\n            <div className='br-powered'>Powered by Misa</div>\n        </div>\n    );\n}\n\nexport default Footer;","import React from 'react';\n\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer/Footer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}